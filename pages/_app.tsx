import type { AppProps } from "next/app";
import Head from "next/head";
import { ThirdwebProvider, useSDK, useSigner } from "@thirdweb-dev/react";
import { Polygon, Mumbai } from "@thirdweb-dev/chains";
import { CHAIN } from "../const/chains";
import { cn } from "@/lib/utils";
import { Inter as FontSans } from "next/font/google";
import localFont from "next/font/local";
import {
  LensProvider,
  RequiredSigner,
  appId,
  development,
  production,
} from "@lens-protocol/react-web";
import { JsonRpcProvider } from "@ethersproject/providers";
// core styles are required for all packages
import '@mantine/core/styles.css';
import NetworkSwitchModal from "@/components/NetworkSwitchModal";
import { useTypedDataSignerWrapper } from "@/lib/typedDataSigner";
import { useRouter } from "next/router";
import { ActionIcon, AppShell, Center, Text, Image, MantineProvider, Space, Tooltip, Divider, Paper, Group, List, ThemeIcon } from '@mantine/core';
import { RiArrowRightDoubleLine, RiArrowLeftDoubleLine } from 'react-icons/ri';
import { ImPlus } from 'react-icons/im';
import { siteConfig } from "../config/site";
import { useDisclosure } from '@mantine/hooks';
import { MantineHeader } from '@/components/MantineAppShell/MantineHeader/MantineHeader';
import {
  LivepeerConfig,
  createReactClient,
  studioProvider,
} from "@livepeer/react";
import { Notifications } from "@mantine/notifications";
import '@mantine/notifications/styles.css';
import { IconCircleCheck } from "@tabler/icons-react";


const livepeerClient = createReactClient({
  provider: studioProvider({
    apiKey: "cf463379-5e2f-469f-b326-42c294a459c9"
  }),
});

function LensThirdwebProvider({ children }: { children: React.ReactNode }) {
  const sdk = useSDK();
  const signer = useSigner();
  const router = useRouter();
  const signerWrapped = useTypedDataSignerWrapper(signer, sdk);
if (!signer && router.pathname !== "/" && router.pathname !== "/why" && router.pathname !== "/profile") {
    return (
      <>
        <NetworkSwitchModal />
      </>
    );
  }

  return (
 <LensProvider
 
       config={{
        
        environment: production,
        bindings: {
          getSigner: async () => signerWrapped as RequiredSigner,
          getProvider: async () =>
          new JsonRpcProvider("https://polygon.rpc.thirdweb.com")
        },
        // @ts-ignore: TODO
        appId: "waves",
      }}
    >
      {children}
    </LensProvider>
  );
}

function MyApp({ Component, pageProps }: AppProps) {
  const [mobileOpened, { toggle: toggleMobile }] = useDisclosure();
  const [desktopOpened, { toggle: toggleDesktop }] = useDisclosure(true);
  return (
    <>
      <Head>
        <title>Waves</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />  
      </Head>

      <main>    
        <LivepeerConfig client={livepeerClient}>
           <MantineProvider>
              <ThirdwebProvider
                activeChain={CHAIN}
                authConfig={{
                  domain: process.env.NEXT_PUBLIC_AUTH_DOMAIN || "evmkit.com",
                  authUrl: "/api/auth",
                }}
                clientId={process.env.NEXT_PUBLIC_THIRDWEB_API_KEY || ""}
                
              >
          <LensThirdwebProvider>
         
              <AppShell
                  padding="md"
                  header={{ height: 60 }}
                  navbar={{
                    width: 300,
                    breakpoint: 'md',
                    collapsed: { mobile: !mobileOpened, desktop: !desktopOpened },
                  }}
                  aside={{
                    width: 300,
                    breakpoint: 'md',
                    collapsed: { mobile: !mobileOpened, desktop: !desktopOpened },
                  }}
                >
      <AppShell.Header>

        <MantineHeader/>
      </AppShell.Header>
      <AppShell.Navbar>
        {desktopOpened ? (
        <>
         <Tooltip position="right-start" label="Close Sidebars">
      <ActionIcon mt={11} ml={11} onClick={toggleDesktop} visibleFrom="sm"  >
       <RiArrowLeftDoubleLine/>
     </ActionIcon>
     </Tooltip>
     </>
   
    ) : 
   null}
    
    </AppShell.Navbar>
    <AppShell.Aside>
<Space h="md"/>
<Center>
   
  <Paper shadow="xl" radius="xl" withBorder p="xl">
      <Text fw={700} ta="center" fs="italic">Powered By</Text>
      <Divider my="sm" />
<Space h="md"/>
     
      <List
      spacing="xs"
      size="sm"
      center
      icon={
        <ThemeIcon color="blue" size={24} radius="xl">
          <IconCircleCheck size="1rem" />
        </ThemeIcon>
      }
    >
      <List.Item><Text fw={700} ta="center" component="a" href="https://www.lens.xyz/" target="_blank" rel="noreferrer">Lens Protocol</Text></List.Item>
      <List.Item><Text fw={700} ta="center" component="a" href="https://livepeer.org/" target="_blank" rel="noreferrer">Livepeer Video</Text></List.Item>
      <List.Item><Text fw={700} ta="center" component="a" href="https://thirdweb.com/" target="_blank" rel="noreferrer">ThirdWeb</Text></List.Item>
      <List.Item><Text fw={700} ta="center" component="a" href="https://www.backme.dev/" target="_blank" rel="noreferrer">BackMe</Text></List.Item>
    
    </List>
     
      </Paper>
   
</Center>
<Space h="md"/>
 </AppShell.Aside>
 
      <AppShell.Main >
      {!desktopOpened ? (
          <Tooltip position="right-start" label="Open Sidebars">
  <div style={{ position: 'fixed' }}>
    <ActionIcon onClick={toggleDesktop} visibleFrom="sm">
      <RiArrowRightDoubleLine />
    </ActionIcon>
  </div>
</Tooltip>

    ) : null}
   
  
           <Notifications/>
            <Component {...pageProps} />
           
           
        </AppShell.Main>
   </AppShell>
           
          </LensThirdwebProvider>
        </ThirdwebProvider>
        </MantineProvider>
      </LivepeerConfig>    
       
      </main>
    </>
  );
}

export default MyApp;
